{
  // Place your tinacms workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "Yjs websocket server": {
    "prefix": "yjs-server",
    "body": [
      "// eslint-disable-next-line @typescript-eslint/no-var-requires",
      "const setupWSConnection = require('y-websocket/bin/utils').setupWSConnection",
      "import * as http from 'http'",
      "import Websocket from 'ws'",
      "import { Socket as NetSocket } from 'net'",
      "",
      "const wss = new Websocket.Server({ noServer: true })",
      "const yWebsocketServer = http.createServer((request, response) => {",
      "  response.writeHead(200, { 'Content-Type': 'text/plain' })",
      "  response.end('okay')",
      "})",
      "",
      "wss.on('connection', setupWSConnection)",
      "",
      "yWebsocketServer.on('upgrade', (request, socket: NetSocket, head) => {",
      "  const handleAuth = (ws: Websocket) => {",
      "    wss.emit('connection', ws, request)",
      "  }",
      "  wss.handleUpgrade(request, socket, head, handleAuth)",
      "})",
      "",
      "yWebsocketServer.listen({ host: '0.0.0.0', port: 8989 })"
    ],
    "description": "Yjs websocket server"
  },
  "Yjs provider": {
    "prefix": "yjs-provider",
    "body": [
      "import * as Y from 'yjs'",
      "import { WebsocketProvider } from 'y-websocket'",
      "import React, { useMemo } from 'react'",
      "",
      "type Props = {",
      "  children: React.ReactNode",
      "}",
      "",
      "export type UserColor = {",
      "  backgroundColor: {",
      "    R: number",
      "    G: number",
      "    B: number",
      "  }",
      "  fontColor: string",
      "}",
      "",
      "export type UserData = {",
      "  username: string",
      "  color: UserColor",
      "}",
      "",
      "type CursorState = {",
      "  color: UserColor",
      "  x: number",
      "  y: number",
      "  username: string",
      "}",
      "",
      "export function YjsProvider(props: Props) {",
      "  const getUsername = () => {",
      "    const username = window.localStorage.getItem('username')",
      "    if (username) {",
      "      return username",
      "    }",
      "    const prompt = window.prompt('Username')",
      "",
      "    window.localStorage.setItem('username', prompt || '')",
      "",
      "    return prompt",
      "  }",
      "",
      "  const username = getUsername()",
      "",
      "  const yDoc: Y.Doc = new Y.Doc()",
      "  const provider = new WebsocketProvider(",
      "    'ws://localhost:8989',",
      "    'Y_SESSION',",
      "    yDoc",
      "  )",
      "  const yChat: Y.Array<string> = yDoc.getArray('chat')",
      "",
      "  const color = getRandomColor()",
      "  const cursors = new Map<number, HTMLDivElement>()",
      "",
      "  // CITYJS1: Handle cursor update",
      "",
      "  React.useEffect(() => {",
      "    provider.connect()",
      "    provider.awareness.setLocalStateField(",
      "      'user',",
      "      JSON.stringify({ username, color })",
      "    )",
      "    // Subscribe to awareness updates",
      "    // ...",
      "",
      "    // @ts-ignore",
      "    window.provider = provider",
      "    // @ts-ignore",
      "    window.yDoc = yDoc",
      "",
      "    // CITYJS2: Handle cursor move",
      "",
      "    return () => {",
      "      provider.awareness.destroy()",
      "      provider.disconnect()",
      "      // Remove event listeners from awareness and window",
      "      // ...",
      "    }",
      "  }, [])",
      "",
      "  const contextValue = useMemo(",
      "    () => ({",
      "      yDoc,",
      "      yChat,",
      "      username,",
      "      provider,",
      "    }),",
      "    [yDoc, yChat, username]",
      "  )",
      "",
      "  return (",
      "    <YjsContext.Provider value={contextValue}>",
      "      {props.children}",
      "    </YjsContext.Provider>",
      "  )",
      "}",
      "",
      "export interface IYjsContext {",
      "  yDoc: Y.Doc",
      "  yChat: Y.Array<string>",
      "  username: string",
      "  provider: WebsocketProvider",
      "}",
      "",
      "export const YjsContext = React.createContext<IYjsContext | undefined>(",
      "  undefined",
      ")",
      "",
      "function createCursor(color: UserColor, username: string): HTMLDivElement {",
      "  const rgbColor = `rgb(\\${color.backgroundColor.R}, \\${color.backgroundColor.G}, \\${color.backgroundColor.B})`",
      "  const cursorDiv = window.document.createElement('div')",
      "  cursorDiv.classList.add('cursor')",
      "",
      "  const spaceInvader = window.document.createElement('div')",
      "  spaceInvader.classList.add('space-invader')",
      "  cursorDiv.appendChild(spaceInvader)",
      "",
      "  const usernameDiv = window.document.createElement('div')",
      "  usernameDiv.classList.add('username')",
      "  usernameDiv.innerText = username",
      "  cursorDiv.appendChild(usernameDiv)",
      "",
      "  spaceInvader.style.boxShadow = `0 0 0 1em \\${rgbColor},0 1em 0 1em \\${rgbColor},-2.5em 1.5em 0 .5em \\${rgbColor},2.5em 1.5em 0 .5em \\${rgbColor},-3em -3em 0 0 \\${rgbColor},3em -3em 0 0 \\${rgbColor},-2em -2em 0 0 \\${rgbColor},2em -2em 0 0 \\${rgbColor},-3em -1em 0 0 \\${rgbColor},-2em -1em 0 0 \\${rgbColor},2em -1em 0 0 \\${rgbColor},3em -1em 0 0 \\${rgbColor},-4em 0 0 0 \\${rgbColor},-3em 0 0 0 \\${rgbColor},3em 0 0 0 \\${rgbColor},4em 0 0 0 \\${rgbColor},-5em 1em 0 0 \\${rgbColor},-4em 1em 0 0 \\${rgbColor},4em 1em 0 0 \\${rgbColor},5em 1em 0 0 \\${rgbColor},-5em 2em 0 0 \\${rgbColor},5em 2em 0 0 \\${rgbColor},-5em 3em 0 0 \\${rgbColor},-3em 3em 0 0 \\${rgbColor},3em 3em 0 0 \\${rgbColor},5em 3em 0 0 \\${rgbColor},-2em 4em 0 0 \\${rgbColor},-1em 4em 0 0 \\${rgbColor},1em 4em 0 0 \\${rgbColor},2em 4em 0 0 \\${rgbColor}`",
      "  spaceInvader.style.width = '1em'",
      "  spaceInvader.style.height = '1em'",
      "  spaceInvader.style.background = rgbColor",
      "  spaceInvader.style.pointerEvents = 'none'",
      "  spaceInvader.style.transform = 'scale(0.3)'",
      "  spaceInvader.style.marginLeft = '-25px'",
      "  spaceInvader.style.marginBottom = '15px'",
      "",
      "  cursorDiv.style.width = '50px'",
      "  cursorDiv.style.height = '50px'",
      "  cursorDiv.style.position = 'absolute'",
      "  cursorDiv.style.zIndex = '10000'",
      "",
      "  usernameDiv.style.border = `2px solid \\${rgbColor}`",
      "  usernameDiv.style.borderRadius = '5px'",
      "  usernameDiv.style.display = 'flex'",
      "  usernameDiv.style.justifyContent = 'center'",
      "",
      "  return cursorDiv",
      "}",
      "",
      "function getRandomColor(): UserColor {",
      "  const color = {",
      "    R: Math.floor(((1 + Math.random()) * 256) / 2),",
      "    G: Math.floor(((1 + Math.random()) * 256) / 2),",
      "    B: Math.floor(((1 + Math.random()) * 256) / 2),",
      "  }",
      "",
      "  const luminance = (0.299 * color.R + 0.587 * color.G + 0.114 * color.B) / 255",
      "",
      "  return {",
      "    backgroundColor: color,",
      "    fontColor: luminance > 0.5 ? 'black' : 'white',",
      "  }",
      "}",
      ""
    ]
  },
  "Handle awareness update": {
    "prefix": "cityjs-1",
    "body": [
      "  const handleAwarenessUpdate = (params: { removed: Array<number> }) => {",
      "    params.removed.forEach((clientID) => {",
      "      const cursorDiv = cursors.get(clientID)",
      "      if (cursorDiv) {",
      "        window.document.body.removeChild(cursorDiv)",
      "        cursors.delete(clientID)",
      "      }",
      "    })",
      "",
      "    function handleCursorUpdate(cursor: CursorState, clientID: number) {",
      "      if (clientID === provider.awareness.clientID) {",
      "        return",
      "      }",
      "",
      "      let cursorDiv = cursors.get(clientID)",
      "      if (!cursorDiv) {",
      "        cursorDiv = createCursor(cursor.color, cursor.username)",
      "        window.document.body.appendChild(cursorDiv)",
      "        cursors.set(clientID, cursorDiv)",
      "      }",
      "",
      "      cursorDiv.style.left = `\\${cursor.x}px`",
      "      cursorDiv.style.top = `\\${cursor.y}px`",
      "    }",
      "",
      "    provider.awareness.getStates().forEach((state, clientID) => {",
      "      if (state.cursor) {",
      "        const cursor: CursorState = JSON.parse(state.cursor)",
      "        handleCursorUpdate(cursor, clientID)",
      "      }",
      "    })",
      "  }"
    ],
    "description": "Handle awareness update"
  },
  "Handle cursor move": {
    "prefix": "cityjs-2",
    "body": [
      "    const handleCursorMove = (e: MouseEvent) => {",
      "      provider.awareness.setLocalStateField(",
      "        'cursor',",
      "        JSON.stringify({ color, x: e.x, y: e.y, username })",
      "      )",
      "    }",
      "",
      "    window.document.addEventListener('mousemove', handleCursorMove)"
    ],
    "description": "Handle cursor move"
  },
  "Use yjs hook": {
    "prefix": "use-yjs",
    "body": [
      "import { useContext } from 'react'",
      "import { YjsContext } from '../yjs/yjs-provider'",
      "",
      "export function useYjs() {",
      "  const context = useContext(YjsContext)",
      "",
      "  if (!context) {",
      "    throw new Error('useYjs must be used within a YjsProvider')",
      "  }",
      "",
      "  return context",
      "}",
      ""
    ],
    "description": "Use yjs hook"
  },
  "Use yjs users hook": {
    "prefix": "use-yjs-users",
    "body": [
      "import { useCallback, useEffect, useState } from 'react'",
      "import { UserColor } from '../yjs/yjs-provider'",
      "import { useYjs } from './use-yjs'",
      "",
      "export type YjsUserData = {",
      "  username: string",
      "  color: UserColor",
      "}",
      "",
      "export function useYjsUsers() {",
      "  const [users, setUsers] = useState<Map<number, YjsUserData>>(new Map())",
      "",
      "  const handleAwarenessUpdate = useCallback(",
      "    (params: { removed: Array<number>; updated: Array<number> }) => {",
      "      params.removed.forEach((clientID) => {",
      "        setUsers((users) => {",
      "          users.delete(clientID)",
      "          return new Map(users)",
      "        })",
      "      })",
      "",
      "      const handleUserUpdate = (user: YjsUserData, clientID: number) => {",
      "        if (clientID === provider.awareness.clientID) {",
      "          return",
      "        }",
      "",
      "        setUsers((users) => {",
      "          users.set(clientID, user)",
      "          return new Map(users)",
      "        })",
      "      }",
      "",
      "      provider.awareness.getStates().forEach((state, clientID) => {",
      "        if (!state.user) {",
      "          return",
      "        }",
      "",
      "        const user: YjsUserData = JSON.parse(state.user)",
      "        handleUserUpdate(user, clientID)",
      "      })",
      "    },",
      "    [users]",
      "  )",
      "",
      "  const { provider } = useYjs()",
      "",
      "  useEffect(() => {",
      "    provider.awareness.on('update', handleAwarenessUpdate)",
      "",
      "    return () => {",
      "      provider.awareness.off('update', handleAwarenessUpdate)",
      "    }",
      "  }, [])",
      "",
      "  return users",
      "}",
      ""
    ],
    "description": "Use yjs users hook"
  },
  "UserAvatar": {
    "prefix": "user-avatar",
    "body": [
      "function UserAvatars() {",
      "  const users = useYjsUsers()",
      "  return (",
      "    <div className=\"flex\">",
      "      {Array.from(users.entries())",
      "        .slice(0, 4)",
      "        .map((user, i) => (",
      "          <div",
      "            key={user[0]}",
      "            style={{",
      "              border: `2px solid rgb(\\${user[1].color.backgroundColor.R}, \\${user[1].color.backgroundColor.G}, \\${user[1].color.backgroundColor.B})`,",
      "              borderRadius: '100%',",
      "              padding: '7px',",
      "              backgroundColor: 'white',",
      "              marginLeft: i > 0 ? '-7px' : '0',",
      "            }}",
      "          >",
      "            {user[1].username.slice(0, 1).toUpperCase()}",
      "          </div>",
      "        ))}",
      "      {Array.from(users.entries()).length > 4 && (",
      "        <div",
      "          style={{",
      "            border: '2px solid #ccc',",
      "            borderRadius: '100%',",
      "            padding: '7px',",
      "            backgroundColor: 'white',",
      "            marginLeft: '-7px',",
      "            width: '42px',",
      "            textAlign: 'center',",
      "          }}",
      "        >",
      "          +{Array.from(users.entries()).length - 4}",
      "        </div>",
      "      )}",
      "    </div>",
      "  )",
      "}",
      ""
    ],
    "description": "UserAvatar component"
  },
  "Monaco yjs": {
    "prefix": "monaco-yjs",
    "body": [
      "    // @ts-ignore",
      "    const provider = window.provider",
      "    // @ts-ignore",
      "    const type = window.yDoc.getText('monaco')",
      "",
      "    // Bind Yjs to the editor model",
      "    const monacoBinding = new MonacoBinding(",
      "      type,",
      "      monacoEditor.getModel()!,",
      "      new Set([monacoEditor]),",
      "      provider.awareness",
      "    )",
      "    provider.connect()",
      "",
      "    // CITYJS: Decoration rules",
      ""
    ],
    "description": "Monaco yjs"
  },
  "Monaco decoration rules": {
    "prefix": "monaco-decoration-rules",
    "body": [
      "    const insertDecorationRules = (user, clientID) => {",
      "      const backgroundColorCss = `\\${user.color.backgroundColor.R}, \\${user.color.backgroundColor.G}, \\${user.color.backgroundColor.B}`",
      "      document.styleSheets[0].insertRule(",
      "        `.yRemoteSelection-\\${clientID} { background-color: rgba(\\${backgroundColorCss}, 0.5); }`,",
      "        0",
      "      )",
      "      document.styleSheets[0].insertRule(",
      "        `.yRemoteSelectionHead-\\${clientID} {",
      "        border-left: rgb(\\${backgroundColorCss}) solid 2px;",
      "        border-top: rgb(\\${backgroundColorCss}) solid 2px;",
      "        border-bottom: rgb(\\${backgroundColorCss}) solid 2px; ",
      "      }`,",
      "        0",
      "      )",
      "      document.styleSheets[0].insertRule(",
      "        `.yRemoteSelectionHead-\\${clientID}::after {",
      "        background-color: rgba(\\${backgroundColorCss}, 1); ",
      "        color: \\${user.color.fontColor};",
      "        content: '\\${user.username}';  ",
      "        position: absolute;",
      "        top: -1rem;",
      "        padding: 0 6px;",
      "        border-radius: 6px;",
      "      }`",
      "      )",
      "    }",
      "",
      "    provider.awareness.getStates().forEach((state, clientID) => {",
      "      if (!state.user) {",
      "        return",
      "      }",
      "",
      "      const user = JSON.parse(state.user)",
      "      insertDecorationRules(user, clientID)",
      "    })",
      "",
      "    provider.awareness.on('update', (params: { added: Array<number> }) => {",
      "      provider.awareness.getStates().forEach((state, clientID) => {",
      "        if (!state.user || !params.added.includes(clientID)) {",
      "          return",
      "        }",
      "",
      "        const user = JSON.parse(state.user)",
      "        insertDecorationRules(user, clientID)",
      "      })",
      "    })"
    ],
    "description": "Monaco decoration rules"
  },
  "Use yjs chat hook": {
    "prefix": "use-yjs-chat",
    "body": [
      "import { useEffect, useState } from 'react'",
      "import { useYjs } from './use-yjs'",
      "import * as Y from 'yjs'",
      "import { UserData } from '../yjs/yjs-provider'",
      "",
      "export type YjsChatData = {",
      "  userData: UserData",
      "  message: string",
      "  clientID: number",
      "}",
      "",
      "export function useYjsChat() {",
      "  const { yChat, provider } = useYjs()",
      "  const [messages, setMessages] = useState<Array<YjsChatData>>([])",
      "",
      "  const handleChatChanged = (event: Y.YArrayEvent<string>) => {",
      "    for (const item of event.changes.delta) {",
      "      if (item.insert !== undefined) {",
      "        if (item.insert instanceof Array) {",
      "          item.insert.forEach((message) => {",
      "            const data: YjsChatData = JSON.parse(message)",
      "            setMessages((messages) => [...messages, data])",
      "          })",
      "        } else {",
      "          const data: YjsChatData = JSON.parse(item.insert)",
      "          setMessages((messages) => [...messages, data])",
      "        }",
      "      } else if (item.delete !== undefined) {",
      "        setMessages((messages) => {",
      "          messages.splice(0, item.delete)",
      "          return [...messages]",
      "        })",
      "      }",
      "    }",
      "  }",
      "",
      "  useEffect(() => {",
      "    yChat.map((message) => {",
      "      const data: YjsChatData = JSON.parse(message)",
      "      setMessages((messages) => [...messages, data])",
      "    })",
      "",
      "    yChat.observe(handleChatChanged)",
      "",
      "    return () => {",
      "      yChat.unobserve(handleChatChanged)",
      "    }",
      "  }, [yChat])",
      "",
      "  return {",
      "    messages,",
      "    sendMessage: (message: string) => {",
      "      if (!message) {",
      "        return",
      "      }",
      "      const userData = JSON.parse(provider.awareness.getLocalState().user)",
      "      yChat.push([",
      "        JSON.stringify({",
      "          userData,",
      "          message,",
      "          clientID: provider.awareness.clientID,",
      "        }),",
      "      ])",
      "    },",
      "    clearMessages: () => {",
      "      yChat.delete(0, yChat.length)",
      "      setMessages([])",
      "    },",
      "  }",
      "}",
      ""
    ],
    "description": "Use yjs chat hook"
  },
  "ChatWindow": {
    "prefix": "chat-window",
    "body": [
      "const ChatWindow = () => {",
      "  const { messages, sendMessage, clearMessages } = useYjsChat()",
      "  const { provider } = useYjs()",
      "  const [message, setMessage] = React.useState('')",
      "",
      "  React.useEffect(() => {",
      "    document",
      "      .querySelector('.dummy-scroll')",
      "      ?.scrollIntoView({ behavior: 'smooth' })",
      "  }, [messages])",
      "",
      "  return (",
      "    <div",
      "      style={{",
      "        height: '100%',",
      "        display: 'flex',",
      "        flexDirection: 'column',",
      "        justifyContent: 'space-between',",
      "      }}",
      "    >",
      "      <h3>Chat window</h3>",
      "      <div>",
      "        <div",
      "          style={{",
      "            maxHeight: '350px',",
      "            overflowY: 'scroll',",
      "          }}",
      "        >",
      "          {messages.map((message, i) => {",
      "            const color = `rgb(\\${message.userData.color.backgroundColor.R}, \\${message.userData.color.backgroundColor.G}, \\${message.userData.color.backgroundColor.B})`",
      "            return (",
      "              <div",
      "                key={i}",
      "                style={{",
      "                  width: '100%',",
      "                  display: 'flex',",
      "                  justifyContent:",
      "                    message.clientID === provider.awareness.clientID",
      "                      ? 'flex-end'",
      "                      : 'flex-start',",
      "                  margin: '5px 0',",
      "                }}",
      "              >",
      "                <div",
      "                  style={{",
      "                    border: `2px solid \\${color}`,",
      "                    borderRadius: '10px',",
      "                    padding: '4px 15px',",
      "                    textAlign:",
      "                      message.clientID === provider.awareness.clientID",
      "                        ? 'right'",
      "                        : 'left',",
      "                  }}",
      "                >",
      "                  {message.message}",
      "                </div>",
      "              </div>",
      "            )",
      "          })}",
      "          <div className=\"dummy-scroll\"></div>",
      "        </div>",
      "        <div",
      "          style={{",
      "            width: '100%',",
      "          }}",
      "        >",
      "          <input",
      "            type=\"text\"",
      "            onKeyDown={(e) => {",
      "              if (e.key === 'Enter') {",
      "                if (message === 'clear') {",
      "                  clearMessages()",
      "                } else {",
      "                  sendMessage(message)",
      "                }",
      "                setMessage('')",
      "              }",
      "            }}",
      "            value={message}",
      "            onChange={(e) => setMessage(e.target.value)}",
      "            style={{",
      "              width: '70%',",
      "              border: '1px solid blue',",
      "              borderRadius: '10px',",
      "              padding: '0 10px',",
      "            }}",
      "          />",
      "          <button",
      "            style={{",
      "              width: '25%',",
      "              marginLeft: '5px',",
      "              border: '1px solid red',",
      "              borderRadius: '10px',",
      "            }}",
      "            onClick={() => {",
      "              sendMessage(message)",
      "              setMessage('')",
      "            }}",
      "          >",
      "            Send",
      "          </button>",
      "        </div>",
      "      </div>",
      "    </div>",
      "  )",
      "}"
    ]
  }
}
